import React, { useState, useEffect } from 'react';
import './App.css';

// Datos actualizados con mejoras del Mid-Sprint 4
const videos = [
  { 
    id: 1, 
    title: '츼lgebra B치sica', 
    subject: 'Matem치ticas', 
    url: { '360p': 'https://youtu.be/basic-algebra-360', '720p': 'https://youtu.be/basic-algebra-720' },
    subtitles: true,
    vttUrl: '/subtitles/algebra.vtt',
    duration: '15:30'
  },
  { 
    id: 2, 
    title: 'Fotos칤ntesis', 
    subject: 'Biolog칤a', 
    url: { '360p': 'https://youtu.be/photosynthesis-360', '720p': 'https://youtu.be/photosynthesis-720' },
    subtitles: false,
    duration: '20:15'
  },
];

const pdfGuides = [
  { 
    id: 1, 
    title: 'Gu칤a de Matem치ticas', 
    url: 'https://aws.s3/guia-matematicas-v3.pdf',
    signed: true,
    index: ['Introducci칩n', 'Ejercicios B치sicos', 'Problemas Avanzados', 'Soluciones']
  },
  { 
    id: 2, 
    title: 'Gu칤a de Biolog칤a', 
    url: 'https://aws.s3/guia-biologia-v3.pdf',
    signed: false,
    index: ['Conceptos Clave', 'Diagramas', 'Cuestionario']
  },
];

function App() {
  const [selectedVideo, setSelectedVideo] = useState(null);
  const [selectedPdf, setSelectedPdf] = useState(null);
  const [selectedQuality, setSelectedQuality] = useState('720p');
  const [activeIndex, setActiveIndex] = useState(0);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Registrar Service Worker para cach칠 offline
    const registerSW = async () => {
      if ('serviceWorker' in navigator) {
        try {
          await navigator.serviceWorker.register('/sw.js');
          console.log('Service Worker registrado con cach칠 din치mico');
        } catch (error) {
          console.error('Error en Service Worker:', error);
        }
      }
      setLoading(false);
    };
    
    registerSW();
  }, []);

  const PdfIndex = ({ index }) => (
    <div className="pdf-index">
      <h3>칈ndice</h3>
      <ul>
        {index.map((item, idx) => (
          <li 
            key={idx} 
            className={activeIndex === idx ? 'active' : ''}
            onClick={() => setActiveIndex(idx)}
          >
            {item}
          </li>
        ))}
      </ul>
    </div>
  );

  const QualitySelector = ({ qualities, current, onSelect }) => (
    <div className="quality-selector">
      <span>Calidad:</span>
      {Object.keys(qualities).map(quality => (
        <button
          key={quality}
          className={current === quality ? 'active' : ''}
          onClick={() => onSelect(quality)}
        >
          {quality}
        </button>
      ))}
    </div>
  );

  const handleDownloadSubtitle = (vttUrl) => {
    // L칩gica para descargar subt칤tulos
    console.log('Descargando subt칤tulos:', vttUrl);
    // Implementaci칩n real usar칤a fetch y Blob para descarga
  };

  return (
    <div className="App">
      <header className="header">
        <h1>Plataforma Educativa <span className="version">v1.4</span></h1>
        <nav>
          <button className="nav-btn">Videos</button>
          <button className="nav-btn">Gu칤as</button>
          <button className="nav-btn">Progreso</button>
        </nav>
      </header>

      <main>
        {loading && (
          <div className="loading-overlay">
            <div className="spinner"></div>
            <p>Optimizando para conexiones lentas...</p>
          </div>
        )}

        {/* Secci칩n de Videos Mejorada */}
        <section className="video-section">
          <h2 className="section-title">칔ltimos Videos Educativos</h2>
          
          <div className="video-grid">
            {videos.map(video => (
              <article 
                key={video.id} 
                className="video-card"
                onClick={() => setSelectedVideo(video)}
              >
                <div className="thumbnail-container">
                  <div className="thumbnail-overlay">
                    <span className="duration">{video.duration}</span>
                    {video.subtitles && (
                      <button 
                        className="subtitle-btn"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDownloadSubtitle(video.vttUrl);
                        }}
                      >
                        游꿢 Descargar Subt칤tulos
                      </button>
                    )}
                  </div>
                </div>
                
                <div className="video-info">
                  <h3>{video.title}</h3>
                  <div className="meta-info">
                    <span className="subject">{video.subject}</span>
                    <div className="quality-tags">
                      {Object.keys(video.url).map(quality => (
                        <span key={quality} className="quality-tag">{quality}</span>
                      ))}
                    </div>
                  </div>
                </div>
              </article>
            ))}
          </div>

          {selectedVideo && (
            <div className="video-player-modal">
              <div className="player-header">
                <h3>{selectedVideo.title}</h3>
                <QualitySelector 
                  qualities={selectedVideo.url} 
                  current={selectedQuality} 
                  onSelect={setSelectedQuality}
                />
              </div>
              
              <div className="video-container">
                <iframe
                  title={`player-${selectedVideo.id}`}
                  src={`${selectedVideo.url[selectedQuality]}?modestbranding=1`}
                  allowFullScreen
                />
              </div>
            </div>
          )}
        </section>

        {/* Secci칩n de PDFs con 칈ndice Interactivo */}
        <section className="pdf-section">
          <h2 className="section-title">Gu칤as de Estudio</h2>
          
          <div className="pdf-grid">
            {pdfGuides.map(pdf => (
              <article 
                key={pdf.id} 
                className="pdf-card"
                onClick={() => setSelectedPdf(pdf)}
              >
                <div className="pdf-header">
                  <div className="pdf-icon"></div>
                  <div className="pdf-meta">
                    <h3>{pdf.title}</h3>
                    {pdf.signed && <span className="signed-badge">九덢잺 Certificado</span>}
                  </div>
                </div>
                <div className="pdf-index-preview">
                  <ul>
                    {pdf.index.slice(0, 3).map((item, idx) => (
                      <li key={idx}>{item}</li>
                    ))}
                  </ul>
                </div>
              </article>
            ))}
          </div>

          {selectedPdf && (
            <div className="pdf-viewer-modal">
              <div className="viewer-container">
                <PdfIndex index={selectedPdf.index} />
                <div className="pdf-content">
                  <iframe
                    title="pdf-viewer"
                    src={`https://docs.google.com/viewer?url=${encodeURIComponent(selectedPdf.url)}&embedded=true`}
                  />
                </div>
              </div>
            </div>
          )}
        </section>
      </main>
    </div>
  );
}

export default App;
